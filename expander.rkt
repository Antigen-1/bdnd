#lang racket/base
(require "codec.rkt" "huffman.rkt" racket/file racket/port racket/async-channel (for-syntax racket/base))
(provide (rename-out (#%bdnd-module-begin #%module-begin)) (except-out (all-from-out racket/base) #%module-begin))

(define-syntax-rule (#%bdnd-module-begin tree prefix file ...)
  (#%module-begin
   (let*-values (((och ich thd) (decompress-from-port)))
     (make-directory* prefix)
     (parameterize ((current-directory prefix))
       (map (lambda (f) (let ((name (cadr f))
                              (size (car f))
                              (bytes-list (cddr f)))
                          (map (lambda (b) (async-channel-put och (open-input-bytes b))) bytes-list)
                          (with-handlers ((exn:fail:filesystem? (lambda (e) (delete-file name) (raise e))))
                            (make-parent-directory* name)
                            (call-with-output-file*
                              name
                              (lambda (out) 
                                (let loop ((t tree) (l null) (s size))
                                  (define (index l)
                                    (let ((r (index-huffman-tree t l)))
                                      (if (byte? (car r))
                                          (begin (write-byte (car r) out) (loop tree (cdr r) (sub1 s)))
                                          (loop (car r) null s))))
                                  (cond ((zero? s))
                                        ((null? l)
                                         (sync (handle-evt ich index)))
                                        (else (index l)))))))))
            (list file ...)))
     (async-channel-put och #f))))
